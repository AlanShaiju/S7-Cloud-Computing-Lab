Server Code (server.py)
This server handles multiple clients, reverses the messages while preserving punctuation, and broadcasts the reversed message to all clients.

Client Code (client.py)
This client connects to the server, allows the user to type messages, and displays reversed messages received from the server.

Explanation
Server Code (server.py):

The server starts and waits for client connections.
For each client, a new thread handles incoming messages.
When a message is received, it is reversed (with punctuation preserved) and broadcast to other clients.
Client Code (client.py):

The client connects to the server and starts a thread to listen for incoming messages.
It allows the user to send messages, which are reversed by the server before being displayed to other clients.



Running the Code
Start the server first:

Run: python server.py
Run multiple instances of the client in separate terminals to simulate multiple users:

Start the client next:
Run: python client.py
This setup will allow each client to communicate through the server, which reverses each message with punctuation intact. Messages are only displayed to other clients after being reversed.

Function Explanation

reverse_message_with_punctuation: This function handles reversing each word in the message while leaving punctuation in place. It does so by:

Extracting letters from each word.
Reversing only the letters and reassembling them, while retaining punctuation in the original positions.
Modifications in Server Code:

reverse_message_with_punctuation is called before broadcasting the message, ensuring each message is transformed as per the new requirements.
Other Parts of Code:

The rest of the code remains similar to our previous setup: the server and clients communicate, the server broadcasts reversed messages, and clients can exit by typing "exit".
